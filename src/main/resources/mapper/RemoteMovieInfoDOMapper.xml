<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="me.newsong.dao.RemoteMovieInfoDOMapper">
    <resultMap id="BaseResultMap" type="me.newsong.domain.entity.RemoteMovieInfoDO">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <constructor>
            <idArg column="id" javaType="java.lang.Long" jdbcType="BIGINT"/>
            <arg column="movie_id" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="poster_url" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="release_time" javaType="java.time.LocalDate" jdbcType="DATE"/>
            <arg column="summary" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="imdb_score" javaType="java.lang.Double" jdbcType="DOUBLE"/>
            <arg column="duration" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>

    <resultMap id="DetailedResultMap" type="me.newsong.domain.entity.RemoteMovieInfoDO">
        <id column="id" property="id"></id>
        <result column="movie_id" property="movieId"></result>
        <result column="poster_url" property="posterUrl"></result>
        <result column="name" property="name"></result>
        <result column="release_time" property="releaseTime"></result>
        <result column="imdb_score" property="imdbScore"></result>
        <result column="summary" property="summary"></result>
        <result column="duration" property="duration"></result>
        <result column="imdb_review_time" property="imdbReviewTime"></result>
        <result column="douban_review_time" property="doubanReviewTime"></result>
        <result column="douban_score" property="doubanScore"></result>
        <result column="movie_recommend_id" property="movieRecommendId"></result>
        <collection property="directors" fetchType="eager" column="id"
                    select="me.newsong.dao.DirectorDOMapper.findByMovieId"></collection>
        <collection property="writers" fetchType="eager" column="id"
                    select="me.newsong.dao.WriterDOMapper.findByMovieId"></collection>
        <collection property="actors" fetchType="eager" column="id"
                    select="me.newsong.dao.ActorDOMapper.findByMovieId"></collection>
        <collection property="languages" fetchType="eager" column="id"
                    select="me.newsong.dao.LanguageDOMapper.findByMovieId"></collection>
        <collection property="countries" fetchType="eager" column="id"
                    select="me.newsong.dao.CountryDOMapper.findByMovieId"></collection>
        <collection property="tags" fetchType="eager" column="id"
                    select="me.newsong.dao.MovieTagDOMapper.findByMovieId"></collection>
    </resultMap>

    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, movie_id, poster_url, name, release_time, summary, imdb_score, duration
    </sql>
    <sql id="Base_Column_ListWithTable">
         movie.id, movie.movie_id, movie.poster_url, movie.name, movie.release_time, movie.summary, movie.imdb_score, movie.duration,movie.imdb_review_time,movie.douban_review_time,movie.douban_score,movie.movie_recommend_id
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <include refid="Base_Column_List"/>
        from movie
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from movie
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="me.newsong.domain.entity.RemoteMovieInfoDO" useGeneratedKeys="true"
            keyProperty="id">
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into movie (id, movie_id, poster_url,
        name, release_time, summary,
        imdb_score, duration,imdb_review_time,douban_score,douban_review_time,gross,movie_recommend_id)
        values (#{id,jdbcType=BIGINT}, #{movieId,jdbcType=VARCHAR}, #{posterUrl,jdbcType=VARCHAR},
        #{name,jdbcType=VARCHAR}, #{releaseTime,jdbcType=TIMESTAMP}, #{summary,jdbcType=VARCHAR},
        #{imdbScore,jdbcType=DECIMAL},
        #{duration,jdbcType=INTEGER},#{imdbReviewTime},#{doubanScore},#{doubanReviewTime},#{gross},#{movieRecommendId})
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="me.newsong.domain.entity.RemoteMovieInfoDO">
        update movie
        <set>
            <if test="movieId != null">
                movie_id = #{movieId,jdbcType=VARCHAR},
            </if>
            <if test="posterUrl != null">
                poster_url = #{posterUrl,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="releaseTime != null">
                release_time = #{releaseTime,jdbcType=TIMESTAMP},
            </if>
            <if test="summary != null">
                summary = #{summary,jdbcType=VARCHAR},
            </if>
            <if test="imdbScore != null">
                imdb_score = #{imdbScore,jdbcType=DECIMAL},
            </if>
            <if test="duration != null">
                duration = #{duration,jdbcType=INTEGER},
            </if>
            <if test="duration != null">
                duration = #{duration,jdbcType=INTEGER},
            </if>
            <if test="imdbReviewTime != null">
                imdb_review_time = #{imdbReviewTime,jdbcType=INTEGER},
            </if>
            <if test="doubanReviewTime != null">
                douban_review_time = #{doubanReviewTime,jdbcType=INTEGER},
            </if>
            <if test="doubanScore != null">
                douban_score = #{doubanScore,jdbcType=DECIMAL},
            </if>
            <if test="gross != null">
                gross = #{gross,jdbcType=INTEGER},
            </if>
            <if test="movieRecommendId != null">
                movie_recommend_id = #{movieRecommendId},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="findByName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from movie
        where name = #{name}
    </select>

    <select id="findByNameContaining" resultMap="DetailedResultMap">
        <bind name="_name" value="'%'+name+'%'"></bind>
        select
        <include refid="Base_Column_List"/>
        from movie
        where name like #{_name}
    </select>

    <select id="findAllMovieNames" resultType="string">
        select name
        from movie 
    </select>

    <select id="findLatestMovies" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_List"/>
        from movie
        order by release_time desc
    </select>


    <select id="findByTagOrderByScore" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        inner join
        (
        select movie_id
        from movie_tag
        where movie_tag =
        (select id
        from tag
        where tag_name = #{tag} )
        ) t
        on movie.id = t.movie_id
        order by imdb_score desc
    </select>

    <select id="findByTagOrderByTime" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        inner join
        (
        select movie_id
        from movie_tag
        where movie_tag =
        (select id
        from tag
        where tag_name = #{tag} )
        ) t
        on movie.id = t.movie_id
        order by release_time desc
    </select>

    <select id="countByTag" resultType="int">
        select count(*)
        from movie 
        inner join 
        (
        select movie_id
        from movie_tag
        where movie_tag = #{tag.id}
        ) t
        on movie.id = t.movie_id
    </select>


    <select id="count" resultType="int">
        select count(*)
        from movie
    </select>

    <select id="findByMovieIdContaining" resultMap="DetailedResultMap">
        <bind name="_movieId" value="'%'+movieId+'%'"></bind>
        select
        <include refid="Base_Column_List"/>
        from movie
        where movie_id like #{_movieId}
    </select>

    <select id="findByCountryContaining" resultMap="DetailedResultMap">
        <bind name="_country" value="'%'+country+'%'"></bind>
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        inner join
        (
        select movie_id
        from movie_country
        where country_id in
        (select id
        from country
        where country_name like #{_country} )
        ) t
        on movie.id = t.movie_id
    </select>

    <select id="findByDirectorContaining" resultMap="DetailedResultMap">
        <bind name="_director" value="'%'+director+'%'"></bind>
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        inner join
        (
        select movie_id
        from movie_director
        where director_id in
        (select id
        from director
        where director_name like #{_director} )
        ) t
        on movie.id = t.movie_id
    </select>

    <select id="findByLanguageContaining" resultMap="DetailedResultMap">
        <bind name="_language" value="'%'+language+'%'"></bind>
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        inner join
        (
        select movie_id
        from movie_language
        where language_id in
        (select id
        from language
        where language_name like #{_language} )
        ) t
        on movie.id = t.movie_id
    </select>

    <select id="findByWriterContaining" resultMap="DetailedResultMap">
        <bind name="_writer" value="'%'+writer+'%'"></bind>
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        inner join
        (
        select movie_id
        from movie_writer
        where writer_id in
        (select id
        from writer
        where writer_name like #{_writer} )
        ) t
        on movie.id = t.movie_id
    </select>

    <select id="findByMovieId" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        where movie_id = #{id}
    </select>

    <select id="findAll" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
    </select>

    <select id="findByRecommendIds" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        where movie_recommend_id in
        <foreach collection="recommendIds" open="(" close=")" item="item_id" separator=",">
            #{item_id}
        </foreach>
    </select>

    <select id="findByRecommendId" resultMap="DetailedResultMap">
        select
        <include refid="Base_Column_ListWithTable"/>
        from movie
        where movie_recommend_id = #{recommendId}
    </select>
    
    <select id="findAllMovieRecommendIds" resultType="long">
        select movie_recommend_id 
        from movie
    </select>

</mapper>